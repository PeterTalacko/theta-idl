@dataclass
class Foo:
    avro_schema: ClassVar[Dict[str, Any]] = json.loads('''{"doc":"Generated with Theta {{version}}\\nType hash: 04ca89441b4b70bfd004931441693fcb","aliases":[],"name":"test.Foo","type":"record","fields":[{"aliases":[],"name":"foo","type":"Foo"}]}''')

    foo: 'Foo'

    def encode_avro(self, encoder: avro.Encoder):
        (lambda record: record.encode_avro(encoder))(self.foo)

    def to_avro(self, out):
        self.encode_avro(avro.Encoder(out))

    @staticmethod
    def decode_avro(decoder: avro.Decoder):
        return Foo(Foo.decode_avro(decoder))

    @staticmethod
    def from_avro(in_):
        return Foo.decode_avro(avro.Decoder(in_))

    @staticmethod
    def write_container(objects: List['Foo'], out,
                        codec: str="deflate", sync_marker: Optional[bytes]=None):
        encoder = avro.Encoder(out)
        container.encode_container(encoder, objects, codec, sync_marker, Foo)

    @staticmethod
    def read_container(in_) -> Iterator['Foo']:
        decoder = avro.Decoder(in_)
        return container.decode_container(decoder, Foo)
