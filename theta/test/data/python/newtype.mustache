from abc import ABC
from dataclasses import dataclass
from datetime import date, datetime, time
from enum import Enum
import json
from typing import Any, ClassVar, Dict, Iterator, List, Mapping, Optional
from uuid import UUID

from theta import avro, container



Newtype = 'int'

@dataclass
class NewtypeRecord:
    avro_schema: ClassVar[Dict[str, Any]] = json.loads('''{"aliases":[],"doc":"Generated with Theta {{version}}\\nType hash: ba7a235e5b8ce0ecfe1458f23efef65f","fields":[{"aliases":[],"name":"foo","type":"int"}],"name":"newtype.NewtypeRecord","type":"record"}''')

    foo: 'Newtype'

    def encode_avro(self, encoder: avro.Encoder):
        (encoder.integral)(self.foo)

    def to_avro(self, out):
        self.encode_avro(avro.Encoder(out))

    @staticmethod
    def decode_avro(decoder: avro.Decoder):
        return NewtypeRecord(decoder.integral())

    @staticmethod
    def from_avro(in_):
        return NewtypeRecord.decode_avro(avro.Decoder(in_))

    @staticmethod
    def write_container(objects: List['NewtypeRecord'], out,
                        codec: str="deflate", sync_marker: Optional[bytes]=None):
        encoder = avro.Encoder(out)
        container.encode_container(encoder, objects, codec, sync_marker, NewtypeRecord)

    @staticmethod
    def read_container(in_) -> Iterator['NewtypeRecord']:
        decoder = avro.Decoder(in_)
        return container.decode_container(decoder, NewtypeRecord)
